generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  recovery_email String?
  username       String?   @unique
  password       String
  user_type      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  image          String?
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
  lockedUntil    DateTime?
  attempts       Int       @default(0)
  accounts       Account[]
  sessions       Session[]
  address        address?
  profile        profile?
}

model employee {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deleted         Boolean   @default(false)
  deletedAt       DateTime?
  employee_id     String    @unique
  hired_date      DateTime?
  subsidiary      String?
  department      String?
  position        String?
  work_calendarId Int?
  calendar        calendar? @relation(fields: [work_calendarId], references: [id])
  address         address?
  general         general[]
  profile         profile?

  @@index([employee_id, name, email, hired_date, subsidiary], map: "employee_index")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model profile {
  id            Int       @id @default(autoincrement())
  first_name    String
  middle_name   String?
  last_name     String
  suffix        String?
  gender        String?
  image         String?
  userId        Int?      @unique
  date_of_birth DateTime?
  employeeId    Int?      @unique
  phone_no      String?
  employee      employee? @relation(fields: [employeeId], references: [id])
  user          user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model address {
  id               Int           @id @default(autoincrement())
  street           String?
  city             String?
  state            String?
  zip              String?
  country          String?
  shipping_address String?
  billing_address  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deleted          Boolean       @default(false)
  deletedAt        DateTime?
  manufacturerId   Int?          @unique
  vendorId         Int?          @unique
  userId           Int?          @unique
  employeeId       Int?          @unique
  employee         employee?     @relation(fields: [employeeId], references: [id])
  manufacturer     manufacturer? @relation(fields: [manufacturerId], references: [id])
  user             user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor           vendor?       @relation(fields: [vendorId], references: [id])
}

model location {
  id                 Int       @id @default(autoincrement())
  department         String?
  floor              String?
  room               String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  deleted            Boolean   @default(false)
  locations          general[] @relation("locations")
  physical_locations general[] @relation("physical_location")
}

model type {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  assets    asset[]
}

model asset_class {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  general   general[]
}

model model {
  id        Int       @id @default(autoincrement())
  name      String
  brand     String?
  number    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  assets    asset[]
}

model category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  assets    asset[]
}

model manufacturer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone_no  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
  address   address?
  assets    asset[]
}

model vendor {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  phone_no     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  deleted      Boolean   @default(false)
  alt_phone_no String?
  fax_no       String?
  image        String?
  remarks      String?
  type         String?
  url          String?
  address      address?
  asset        asset[]
}

// add parent, project, residual_value, residual_value_percentage, accounting_method, asset_lifetime, alternate_number
model asset {
  id                        Int           @id @default(autoincrement())
  name                      String
  number                    String        @unique
  description               String?
  serial_number             String?
  original_cost             Float?
  current_netbook_value     Float?
  current_cost              Float?
  project                   String?
  alt_number                String?
  residual_value            Float?
  residual_value_percentage Float?
  accounting_method         String?
  asset_lifetime            String?
  parent                    asset?        @relation(name: "parent_asset", fields: [parentId], references: [id])
  parentId                  Int?
  children                  asset[]       @relation(name: "parent_asset")
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  deletedAt                 DateTime?
  deleted                   Boolean       @default(false)
  typeId                    Int?
  modelId                   Int?
  categoryId                Int?
  manufacturerId            Int?
  vendorId                  Int?
  barcode                   String?
  category                  category?     @relation(fields: [categoryId], references: [id])
  manufacturer              manufacturer? @relation(fields: [manufacturerId], references: [id])
  model                     model?        @relation(fields: [modelId], references: [id])
  type                      type?         @relation(fields: [typeId], references: [id])
  vendor                    vendor?       @relation(fields: [vendorId], references: [id])

  // general subtab connection
  general            general?
  depreciation_rules depreciation_rules?
  revision_rules     revision_rules?

  @@index([name, number, serial_number, typeId, categoryId])
}

model general {
  id                       Int       @id @default(autoincrement())
  asset                    asset     @relation(fields: [assetId], references: [id])
  assetId                  Int       @unique
  currency                 String?
  purchase_date            DateTime?
  subsidiary               String?
  depreciation_start_date  DateTime?
  depreciation_end_date    DateTime?
  depreciation_active      Boolean?  @default(false)
  target_depreciation_date DateTime?
  last_depreciation_amount Int?
  last_depreciation_period Int?

  custodian           employee?    @relation(fields: [custodianId], references: [id])
  custodianId         Int?
  physical_location   location?    @relation(name: "physical_location", fields: [physical_locationId], references: [id])
  physical_locationId Int?
  location            location?    @relation(name: "locations", fields: [locationId], references: [id])
  locationId          Int?
  class               asset_class? @relation(fields: [classId], references: [id])
  classId             Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model depreciation_rules {
  id          Int       @id @default(autoincrement())
  asset       asset     @relation(fields: [assetId], references: [id])
  assetId     Int       @unique
  acquisition String?
  pro_rata    String?
  disposal    String?
  mid_month   DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model revision_rules {
  id      Int   @id @default(autoincrement())
  asset   asset @relation(fields: [assetId], references: [id])
  assetId Int   @unique

  financial_start_year   String?
  annual_method_entry    String?
  convention             String?
  period_convention      String?
  depreciation_period    String?
  prior_year_NBV         String?
  group_depreciation     String?
  group_master           String?
  allow_override         String?
  add_alternative_method String?
  store_history          String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model calendar {
  id        Int       @id @default(autoincrement())
  name      String
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean    @default(false)
  employee  employee[]
}
