generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  recovery_email String?
  username       String?   @unique
  password       String
  user_type      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  image          String?
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
  lockedUntil    DateTime?
  attempts       Int       @default(0)
  accounts       Account[]
  sessions       Session[]
  address        Address?
  profile        Profile?
}

model Employee {
  id          Int       @id @default(autoincrement())
  name        String?
  hired_date  DateTime?
  position    String?
  employee_id String?   @unique
  email       String?   @unique

  locked       Boolean   @default(false)
  lockedAt     DateTime?
  lockedReason String?
  lockedUntil  DateTime?
  attempts     Int       @default(0)

  profile      Profile?
  address      Address?
  team         Team?    @relation("members", fields: [teamId], references: [id], onDelete: SetNull)
  teamId       Int?
  supervisee   Team?    @relation("supervisors", fields: [superviseeId], references: [id])
  superviseeId Int?
  owned_assets Asset[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

model Profile {
  id            Int       @id @default(autoincrement())
  first_name    String
  middle_name   String?
  last_name     String
  suffix        String?
  gender        String?
  image         String?
  date_of_birth DateTime?
  phone_no      String?
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?      @unique
  employee      Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId    Int?      @unique
}

model Address {
  id         Int       @id @default(autoincrement())
  street     String?
  city       String?
  state      String?
  zip        String?
  country    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  userId     Int?      @unique
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int?      @unique
  vendor     Vendor?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId   Int?      @unique
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId Int?      @unique
}

model Location {
  id          Int          @id @default(autoincrement())
  departments Department[]
  floor       String?
  room        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deleted     Boolean      @default(false)

  assets Asset[]
}

model Model {
  id     Int     @id @default(autoincrement())
  name   String
  brand  String?
  number String?

  class      AssetClass?    @relation(fields: [classId], references: [id], onDelete: SetNull)
  classId    Int?
  type       AssetType?     @relation(fields: [typeId], references: [id], onDelete: SetNull)
  typeId     Int?
  category   AssetCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  assets Asset[]
}

model AssetClass {
  id   Int    @id @default(autoincrement())
  name String

  model      Model[]
  categories AssetCategory[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model AssetCategory {
  id   Int    @id @default(autoincrement())
  name String

  model   Model[]
  class   AssetClass? @relation(fields: [classId], references: [id], onDelete: SetNull)
  classId Int?
  types   AssetType[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model AssetType {
  id   Int    @id @default(autoincrement())
  name String

  model      Model[]
  category   AssetCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model AssetManagement {
  id             Int       @id @default(autoincrement())
  currency       String?
  original_cost  Float?
  current_cost   Float?
  residual_value Float?
  purchase_date  DateTime?

  depreciation_start  DateTime?
  depreciation_end    DateTime?
  depreciation_status String?
  depreciation_period Int?
  depreciation_rule   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  asset   Asset? @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId Int?   @unique
}

model Company {
  id       Int      @id @default(autoincrement())
  name     String
  phone_no String[]
  email    String?
  website  String?
  remarks  String?

  address      Address?
  departments  Department[]
  subsidiaries Company[]    @relation("subsidiaries")
  parent       Company?     @relation("subsidiaries", fields: [parentId], references: [id])
  parentId     Int?
  assets       Asset[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model Department {
  id   Int    @id @default(autoincrement())
  name String

  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int?     @unique

  location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int?
  teams      Team[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model Team {
  id   Int    @id @default(autoincrement())
  name String

  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId Int?        @unique

  supervisors Employee[] @relation("supervisors")
  members     Employee[] @relation("members")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model AssetProject {
  id   Int    @id @default(autoincrement())
  name String

  assets Asset[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}

model Vendor {
  id       Int      @id @default(autoincrement())
  name     String
  phone_no String[]
  email    String?
  website  String?
  remarks  String?
  image    String?
  fax_no   String?
  type     String?

  address Address?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)

  assets Asset[]
}

model Asset {
  id          Int     @id @default(autoincrement())
  name        String
  number      String
  alt_number  String?
  serial_no   String?
  barcode     String?
  description String?
  remarks     String?

  parent         Asset?           @relation("children", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       Int?
  children       Asset[]          @relation("children")
  model          Model?           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId        Int?             @unique
  custodian      Employee?        @relation(fields: [custodianId], references: [id], onDelete: Cascade)
  custodianId    Int?
  location       Location?        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId     Int?
  vendor         Vendor?          @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId       Int?
  management     AssetManagement?
  project        AssetProject?    @relation(fields: [assetProjectId], references: [id])
  assetProjectId Int?
  subisidiary    Company?         @relation(fields: [subisidiaryId], references: [id], onDelete: Cascade)
  subisidiaryId  Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  deleted   Boolean   @default(false)
}
